# encoding=utf-8from __future__ import print_functionimport numpy as npimport scipy.ioimport torchfrom model.train import trainfrom utils.arguments import arg_parsefrom utils.loadData import loadDatadevice = torch.device("cuda" if torch.cuda.is_available() else "cpu")if __name__ == "__main__":    args = arg_parse()    x, y = loadData(args)    criterion = torch.nn.MSELoss(reduction='none')  # Loss function: L1Loss, BCEWithLogitsLoss, MSELoss, KLDivLoss    repNum = args.repNum    epochs = args.epochs    lr = args.lr    ACCList = np.zeros((repNum, 2))    NMIList = np.zeros((repNum, 2))    ARIList = np.zeros((repNum, 2))    alpha = args.alpha  # Coefficient of regularization term    beta = args.beta  # Coefficient of orthogonality constraint    lr_milestones = args.lr_milestones    # Features ranges in {5,10,...,100}    for epoch in range(1, repNum + 1):        k = 5 * epoch  # The number of selected features        ACC, NMI, ARI = train(x, y, k, criterion, epochs, alpha, beta, lr, lr_milestones, device)        ACCList[epoch - 1, :] = ACC        NMIList[epoch - 1, :] = NMI        ARIList[epoch - 1, :] = ARI        print(ACC)    print("ACC=", ACCList)    print("NMI=", NMIList)    print("ARI=", ARIList)    scipy.io.savemat('./result/' + args.DS + '_result.mat',                     mdict={'ACC': ACCList, 'NMI': NMIList, 'ARI': ARIList})